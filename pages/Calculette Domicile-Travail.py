import streamlit as st
import pandas as pd
from calculators import (
    calculate_distance,
    calculate_distance_dual_validation,
    create_summary_report,
    create_transport_mode_summary
)
from validation import ExcelValidator
import io
import logging
from config import get_api_key
import base64

st.set_page_config(
    page_title="Calculateur Distance Domicile-Travail",
    page_icon="üöó",
    layout="wide"
)
# Encodage du logo en base64 pour l'injecter en CSS (fiable en d√©ploiement)
with open("img/logo2.png", "rb") as f:
    logo_b64 = base64.b64encode(f.read()).decode()

st.markdown(f"""
<style>
/* 1) Cas standard : navigation multipage visible (stSidebarNav) */
[data-testid="stSidebarNav"]::before {{
    content: "";
    display: block;
    margin: 1rem auto 0rem auto;
    width: 80%;
    height: 100px;
    background-image: url("data:image/png;base64,{logo_b64}");
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
}}
</style>
""", unsafe_allow_html=True)
st.title("üìç Calcul de Distances domicile-travail")
st.markdown("---")

st.markdown("""
### Instructions
1. Uploadez votre fichier Excel contenant les donn√©es de d√©placements
2. L'application calculera automatiquement les distances
3. T√©l√©chargez le fichier enrichi avec les r√©sultats d√©taill√©s et le r√©capitulatif par mode de transport
""")

# Configuration de l'API
st.sidebar.header("‚öôÔ∏è Configuration")

# S√©lection de l'ann√©e du bilan
st.sidebar.markdown("### üìÖ Param√®tres du bilan")

# Dictionnaire des jours f√©ri√©s en semaine par ann√©e
JOURS_FERIES = {
    2023: 9,
    2024: 10,
    2025: 10,
    2026: 9,
}

annee_bilan = st.sidebar.selectbox(
    "Ann√©e du bilan:",
    options=sorted(JOURS_FERIES.keys(), reverse=True),
    index=1,  # 2024 par d√©faut
    help="S√©lectionner l'ann√©e du bilan pour calculer les distances annuelles"
)

jours_feries = JOURS_FERIES.get(annee_bilan, 10)
st.sidebar.info(f"‚ÑπÔ∏è Jours f√©ri√©s en semaine pour {annee_bilan}: **{jours_feries} jours**")

st.sidebar.markdown("---")
st.sidebar.markdown("### üìç Localisation")

# Dictionnaire des d√©partements fran√ßais
DEPARTEMENTS = {
    "01": "Ain", "02": "Aisne", "03": "Allier", "04": "Alpes-de-Haute-Provence", "05": "Hautes-Alpes",
    "06": "Alpes-Maritimes", "07": "Ard√®che", "08": "Ardennes", "09": "Ari√®ge", "10": "Aube",
    "11": "Aude", "12": "Aveyron", "13": "Bouches-du-Rh√¥ne", "14": "Calvados", "15": "Cantal",
    "16": "Charente", "17": "Charente-Maritime", "18": "Cher", "19": "Corr√®ze", "21": "C√¥te-d'Or",
    "22": "C√¥tes-d'Armor", "23": "Creuse", "24": "Dordogne", "25": "Doubs", "26": "Dr√¥me",
    "27": "Eure", "28": "Eure-et-Loir", "29": "Finist√®re", "2A": "Corse-du-Sud", "2B": "Haute-Corse",
    "30": "Gard", "31": "Haute-Garonne", "32": "Gers", "33": "Gironde", "34": "H√©rault",
    "35": "Ille-et-Vilaine", "36": "Indre", "37": "Indre-et-Loire", "38": "Is√®re", "39": "Jura",
    "40": "Landes", "41": "Loir-et-Cher", "42": "Loire", "43": "Haute-Loire", "44": "Loire-Atlantique",
    "45": "Loiret", "46": "Lot", "47": "Lot-et-Garonne", "48": "Loz√®re", "49": "Maine-et-Loire",
    "50": "Manche", "51": "Marne", "52": "Haute-Marne", "53": "Mayenne", "54": "Meurthe-et-Moselle",
    "55": "Meuse", "56": "Morbihan", "57": "Moselle", "58": "Ni√®vre", "59": "Nord",
    "60": "Oise", "61": "Orne", "62": "Pas-de-Calais", "63": "Puy-de-D√¥me", "64": "Pyr√©n√©es-Atlantiques",
    "65": "Hautes-Pyr√©n√©es", "66": "Pyr√©n√©es-Orientales", "67": "Bas-Rhin", "68": "Haut-Rhin", "69": "Rh√¥ne",
    "70": "Haute-Sa√¥ne", "71": "Sa√¥ne-et-Loire", "72": "Sarthe", "73": "Savoie", "74": "Haute-Savoie",
    "75": "Paris", "76": "Seine-Maritime", "77": "Seine-et-Marne", "78": "Yvelines", "79": "Deux-S√®vres",
    "80": "Somme", "81": "Tarn", "82": "Tarn-et-Garonne", "83": "Var", "84": "Vaucluse",
    "85": "Vend√©e", "86": "Vienne", "87": "Haute-Vienne", "88": "Vosges", "89": "Yonne",
    "90": "Territoire de Belfort", "91": "Essonne", "92": "Hauts-de-Seine", "93": "Seine-Saint-Denis",
    "94": "Val-de-Marne", "95": "Val-d'Oise", "971": "Guadeloupe", "972": "Martinique",
    "973": "Guyane", "974": "La R√©union", "976": "Mayotte"
}

# Cr√©er la liste des options pour le selectbox
departement_options = ["Non sp√©cifi√©"] + [f"{code} - {nom}" for code, nom in sorted(DEPARTEMENTS.items())]

departement_selection = st.sidebar.selectbox(
    "D√©partement:",
    departement_options,
    index=departement_options.index("59 - Nord") if "59 - Nord" in departement_options else 0,
    help="Sp√©cifier le d√©partement am√©liore la pr√©cision de g√©olocalisation"
)

# Extraire le nom du d√©partement
if departement_selection == "Non sp√©cifi√©":
    region_choice = None
else:
    # Extraire le nom apr√®s le " - "
    region_choice = departement_selection.split(" - ", 1)[1] if " - " in departement_selection else None

st.sidebar.markdown("---")
st.sidebar.markdown("### üåê Service de g√©olocalisation")

# Charger automatiquement la cl√© API ORS depuis st.secrets ou .env
api_key_ors = get_api_key()

if api_key_ors:
    st.sidebar.success("‚úÖ Cl√© API OpenRouteService charg√©e")
    st.sidebar.info(
        "üí° **Calcul automatique**: Les distances seront calcul√©es avec Nominatim ET "
        "OpenRouteService pour garantir la pr√©cision. Le syst√®me s√©lectionnera automatiquement "
        "la valeur la plus r√©aliste."
    )
else:
    st.sidebar.warning(
        "‚ö†Ô∏è Cl√© API OpenRouteService non trouv√©e. "
        "Le calcul sera effectu√© uniquement avec Nominatim (plus lent)."
    )
    st.sidebar.info(
        "üí° **Conseil**: Ajoutez votre cl√© ORS dans les secrets "
        "pour activer la validation crois√©e des distances."
    )

# Upload du fichier
uploaded_file = st.file_uploader(
    "üìÅ Glissez-d√©posez votre fichier Excel ici",
    type=["xlsx", "xls"],
    help="Le fichier doit contenir les colonnes de commune de r√©sidence et lieu de travail"
)

if uploaded_file is not None:
    try:
        # Validation du fichier Excel
        st.info("üîç Validation du fichier en cours...")
        validator = ExcelValidator()
        validation_result = validator.validate_file(uploaded_file)

        # Affichage du rapport de validation
        st.markdown("### üìã Rapport de Validation")

        # Statistiques g√©n√©rales
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìä Lignes totales", validation_result.total_rows)
        with col2:
            st.metric("‚úÖ Lignes valides", validation_result.valid_rows)
        with col3:
            st.metric("‚ùå Lignes invalides", validation_result.total_rows - validation_result.valid_rows)

        # Affichage des erreurs critiques
        if validation_result.errors:
            st.error("üö´ Erreurs critiques d√©tect√©es")
            for error in validation_result.errors:
                st.error(error)

        # Affichage des avertissements
        if validation_result.warnings:
            with st.expander(f"‚ö†Ô∏è Avertissements ({len(validation_result.warnings)})"):
                for warning in validation_result.warnings:
                    st.warning(warning)

        # Si la validation √©choue, arr√™ter le traitement
        if not validation_result.is_valid:
            st.error("‚ùå Le fichier ne peut pas √™tre trait√©. Veuillez corriger les erreurs ci-dessus.")
            st.stop()

        # Message de succ√®s de validation
        st.success(f"‚úÖ Validation r√©ussie ! {validation_result.valid_rows} lignes peuvent √™tre trait√©es sur {validation_result.total_rows}")

        # Lecture du fichier Excel avec la feuille sp√©cifique
        # skiprows=5 pour ignorer les 5 premi√®res lignes (1-5)
        # La ligne 6 devient les en-t√™tes de colonnes
        # Les donn√©es commencent √† la ligne 7
        uploaded_file.seek(0)  # R√©initialiser le pointeur du fichier
        df = pd.read_excel(uploaded_file, sheet_name="Questionnaire dom-travail", skiprows=5)

        # Affichage aper√ßu
        with st.expander("üëÄ Aper√ßu des donn√©es"):
            st.dataframe(df.head(10))

        # Identifier les colonnes par leur position (index commence √† 0)
        # F = colonne 5, H = colonne 7, I = colonne 8, J = colonne 9, L = colonne 11

        # Renommer les colonnes pour faciliter le traitement
        df_columns = df.columns.tolist()

        # V√©rifier que le fichier a assez de colonnes
        if len(df_columns) < 12:
            st.error(f"‚ùå Le fichier n'a pas assez de colonnes. Nombre de colonnes: {len(df_columns)}")
        else:
            # Utiliser directement les colonnes existantes par leur position
            residence_col = df_columns[5]  # Colonne F
            jours_site_col = df_columns[6]  # Colonne G - Nombre de jours sur site par semaine
            transport_col = df_columns[7]  # Colonne H
            vehicle_col = df_columns[8]    # Colonne I
            energy_col = df_columns[9]     # Colonne J
            travail_col = df_columns[11]   # Colonne L

            has_transport_data = True

            st.info(f"üìã Colonnes identifi√©es:\n- Habitation: Colonne F\n- Jours/semaine: Colonne G\n- Transport: Colonne H\n- V√©hicule: Colonne I\n- √ânergie: Colonne J\n- Travail: Colonne L")

            if region_choice:
                st.success(f"üåç R√©gion s√©lectionn√©e: **{region_choice}**")
            else:
                st.warning("‚ö†Ô∏è Aucune r√©gion sp√©cifi√©e - la g√©olocalisation peut √™tre moins pr√©cise")

            # Bouton de calcul
            if st.button("üöÄ Calculer les distances", type="primary"):
                progress_bar = st.progress(0)
                status_text = st.empty()

                distances = []
                errors = []
                warnings = []

                # Initialiser les compteurs de statistiques
                dual_validation_count = 0
                nominatim_only_count = 0
                ors_only_count = 0
                average_count = 0
                manual_check_count = 0

                # Configurer le logger pour afficher dans le terminal
                logger = logging.getLogger('dual_distance_calculator')

                for idx, row in df.iterrows():
                    status_text.text(f"Calcul en cours... {idx + 1}/{len(df)}")
                    progress_bar.progress((idx + 1) / len(df))

                    commune_residence = str(row[residence_col]).strip()
                    commune_travail = str(row[travail_col]).strip()

                    # Calcul avec validation crois√©e si cl√© ORS disponible
                    if api_key_ors:
                        result = calculate_distance_dual_validation(
                            commune_residence,
                            commune_travail,
                            api_key_ors=api_key_ors,
                            region1=region_choice,
                            region2=region_choice
                        )

                        distance = result.final_distance

                        # Compter les sources
                        if result.source == "average":
                            average_count += 1
                        elif result.source == "nominatim":
                            nominatim_only_count += 1
                        elif result.source == "ors":
                            ors_only_count += 1
                        elif result.source == "both":
                            dual_validation_count += 1

                        if result.status == "error":
                            manual_check_count += 1
                            errors.append(f"Ligne {idx + 1}: {commune_residence} ‚Üí {commune_travail} - {result.message}")
                        elif result.status == "warning":
                            warnings.append(f"Ligne {idx + 1}: {commune_residence} ‚Üí {commune_travail} - {result.message}")

                    else:
                        # Fallback sur Nominatim uniquement
                        distance = calculate_distance(
                            commune_residence,
                            commune_travail,
                            api_choice="Nominatim (Gratuit)",
                            api_key=None,
                            region1=region_choice,
                            region2=region_choice
                        )
                        nominatim_only_count += 1

                    if distance is None:
                        if api_key_ors:
                            errors.append(f"Ligne {idx + 1}: {commune_residence} ‚Üí {commune_travail} - Distance non calculable")
                        else:
                            errors.append(f"Ligne {idx + 1}: {commune_residence} ‚Üí {commune_travail}")
                        distances.append(None)
                    else:
                        distances.append(round(distance, 2))

                # Ajout de la colonne distance
                df["Distance (km)"] = distances

                # Afficher les statistiques de validation dans les logs
                if api_key_ors:
                    logger.info(f"\n{'='*80}")
                    logger.info(f"üìä RAPPORT DE VALIDATION CROIS√âE")
                    logger.info(f"{'='*80}")
                    logger.info(f"‚úÖ Validation par moyenne (diff < 10%): {average_count}")
                    logger.info(f"‚úÖ M√™me commune confirm√©e par les deux: {dual_validation_count}")
                    logger.info(f"‚ö†Ô∏è  Nominatim uniquement: {nominatim_only_count}")
                    logger.info(f"‚ö†Ô∏è  ORS uniquement: {ors_only_count}")
                    logger.info(f"‚ùå √Ä v√©rifier manuellement: {manual_check_count}")
                    logger.info(f"{'='*80}\n")

                # Calcul du nombre de jours travaill√©s par an et de la distance annuelle
                jours_annuels = []
                distances_annuelles = []

                for idx, row in df.iterrows():
                    jours_par_semaine = row[jours_site_col]
                    distance_km = row["Distance (km)"]

                    # V√©rifier que les valeurs sont valides
                    if pd.notna(jours_par_semaine) and pd.notna(distance_km):
                        try:
                            jours_par_semaine = float(jours_par_semaine)
                            # Calcul: (jours/semaine √ó 52) - jours f√©ri√©s
                            nb_jours_annuel = (jours_par_semaine * 52) - jours_feries
                            jours_annuels.append(round(nb_jours_annuel, 0))

                            # Calcul distance annuelle: distance √ó nb_jours √ó 2 (aller-retour)
                            distance_annuelle = distance_km * nb_jours_annuel * 2
                            distances_annuelles.append(round(distance_annuelle, 2))
                        except (ValueError, TypeError):
                            jours_annuels.append(None)
                            distances_annuelles.append(None)
                    else:
                        jours_annuels.append(None)
                        distances_annuelles.append(None)

                df["Jours travaill√©s/an"] = jours_annuels
                df["Distance annuelle (km)"] = distances_annuelles

                status_text.text("‚úÖ Calcul termin√© !")
                progress_bar.progress(1.0)

                # Affichage des erreurs
                if errors:
                    with st.expander(f"‚ö†Ô∏è {len(errors)} erreur(s) de calcul"):
                        for error in errors:
                            st.warning(error)

                # Affichage du r√©sultat
                st.success(f"üéâ Distances calcul√©es avec succ√®s !")

                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Lignes trait√©es", len(df))
                with col2:
                    st.metric("Distances calcul√©es", len(df) - len(errors))

                # Aper√ßu du r√©sultat
                with st.expander("üìä R√©sultat d√©taill√©"):
                    st.dataframe(df)

                # G√©n√©ration du r√©capitulatif
                st.markdown(f"### üìä R√©capitulatif par mode de transport - Ann√©e {annee_bilan}")

                # Cr√©er un DataFrame pour le r√©capitulatif avec les colonnes n√©cessaires
                df_summary = df[[residence_col, travail_col, transport_col, vehicle_col, energy_col, jours_site_col, "Distance (km)", "Distance annuelle (km)"]].copy()
                df_summary.columns = ["Lieu d'habitation", "Lieu de travail", "Mode de transport", "Type de v√©hicule", "Type d'√©nergie", "Jours/semaine", "Distance (km)", "Distance annuelle (km)"]

                summary_detailed = create_summary_report(df_summary)
                st.dataframe(summary_detailed, use_container_width=True)

                # Export du fichier avec 2 feuilles
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='Questionnaire dom-travail')
                    summary_detailed.to_excel(writer, index=False, sheet_name='R√©capitulatif')

                excel_data = output.getvalue()

                st.download_button(
                    label="üì• T√©l√©charger le fichier Excel complet",
                    data=excel_data,
                    file_name="DDT_avec_distances.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors du traitement du fichier: {str(e)}")
        st.exception(e)

else:
    st.info("üëÜ Commencez par uploader un fichier Excel")

    # Afficher un exemple de fichier
    st.markdown("### üìù Format attendu du fichier Excel")

    st.markdown("""
    **Structure requise :**
    - Feuille nomm√©e : `Questionnaire dom-travail`
    - Ligne 6 : En-t√™tes de colonnes
    - Ligne 7+ : Donn√©es
    """)

    example_df = pd.DataFrame({
        "Colonne F\nCommune de r√©sidence": [
            "Paris",
            "Lyon",
            "Marseille",
            "Lille"
        ],
        "Colonne G\nJours/semaine sur site": [
            5,
            4,
            3,
            5
        ],
        "Colonne H\nMoyen de transport": [
            "Voiture",
            "Voiture",
            "Transport en commun",
            "V√©lo ou marche"
        ],
        "Colonne I\nCat√©gorie voiture": [
            "Petite",
            "Moyenne",
            "",
            ""
        ],
        "Colonne J\n√ânergie voiture": [
            "Essence",
            "Diesel",
            "",
            ""
        ],
        "Colonne L\nLieu de travail": [
            "La D√©fense, Paris",
            "Villeurbanne",
            "Aix-en-Provence",
            "Roubaix"
        ]
    })

    st.dataframe(example_df, use_container_width=True)

    st.markdown("""
    **Notes importantes :**
    - Les colonnes I et J (cat√©gorie et √©nergie voiture) sont **obligatoires uniquement** si le transport est "Voiture"
    - Les communes peuvent √™tre pr√©cis√©es avec leur d√©partement ou r√©gion
    - Le nombre de jours/semaine doit √™tre entre 1 et 5
    """)

st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>"
    "D√©velopp√© pour le calcul des √©missions domicile-travail | "
    "Compatible avec toutes les communes de France"
    "</div>",
    unsafe_allow_html=True
)